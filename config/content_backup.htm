<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<h1>WEEK2~9</h1>
<h4><span>WEEK 2 </span></h4>
<h4>使用github建立倉儲和開啟近端</h4>
<p>1.至mde.tw 2019Fall電腦輔助設計實習下載2019fall可攜程式至隨身碟</p>
<p>2.利用git config指令設定user name和email及proxy</p>
<p>3.git clone 建立個人github倉儲</p>
<p>4.利用submodule指令設定cmsimde</p>
<p>5.設定flask_cors</p>
<p>6.利用cmsimde python wsgi.py 開啟近端網址</p>
<p>7.錄製操作影片</p>
<p><a href="https://youtu.be/8rPCwZ-RVuk">https://youtu.be/8rPCwZ-RVuk</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8rPCwZ-RVuk" width="560"></iframe></p>
<p></p>
<h4><span>WEEK 3</span></h4>
<h4>編譯Slovespace</h4>
<p>1.將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe</p>
<p>2.查驗 git 版本在 2.13 以上，即可使用 git clone --recurse-submodules 指令取得所有子模組資料</p>
<p>3.將CMakeLists line 713 and 714 前面加上 #</p>
<p>4.手動進行 libpng.dll.a 的編譯，並且改名為 libpng_static.a 後放到Y槽的 lib 目錄</p>
<p>5.回到 solvespace 目錄， 建立 build 目錄後進入 build 目錄，執行以下兩行程式</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p>6.錄製操作影片</p>
<p><a href="https://youtu.be/pi_DWE3nSlY">https://youtu.be/pi_DWE3nSlY</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/pi_DWE3nSlY" width="560"></iframe></p>
<p></p>
<h4><span>WEEK 4</span></h4>
<h4>跟上第 二 三 周進度</h4>
<p></p>
<h4><span>WEEK 5</span></h4>
<h4>Slovespace 操作</h4>
<p><span>1. 各組進行分組作業利用solvespace進行零組件繪製</span></p>
<p><span>2. 各組每人分別選擇要繪製之零組件</span></p>
<p><span>3. 利用solvespace進行繪製並錄製一個帶有字幕的影片</span></p>
<h4></h4>
<p><span> </span></p>
<p></p>
<p></p>